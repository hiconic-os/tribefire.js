// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AliasContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.BooleanFunctionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.FullTextComparisonContext;
import com.braintribe.model.processing.query.parser.impl.context.ConditionCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;
import com.braintribe.model.query.Source;
import com.braintribe.model.query.conditions.Condition;

public abstract class GmqlBooleanFunctionParserListener extends GmqlContextFunctionParserListener {

	@Override
	public void exitBooleanFunction(BooleanFunctionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitFullTextComparison(FullTextComparisonContext ctx) {
		AliasContext aliasContext = ctx.alias();
		String alias = null;
		if (aliasContext != null) {
			alias = ((DefaultCustomContext) takeValue(aliasContext).cast()).getReturnValue();
		}
		
		String stringValue = ((DefaultCustomContext) takeValue(ctx.stringValue()).cast()).getReturnValue();
		
		Source source = null;
		
		if (alias != null) {
			source = acquireSource(alias);
		}
		
		Condition fullTextComparison = $.fullTextComparison(source, stringValue);
		addToObjectsWithSourcesList(fullTextComparison);
		setValue(ctx, new ConditionCustomContext(fullTextComparison));
	}

}
