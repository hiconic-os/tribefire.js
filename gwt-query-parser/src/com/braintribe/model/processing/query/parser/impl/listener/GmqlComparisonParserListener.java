// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.api.GmqlQueryParserException;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.BooleanFunctionComparisonContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GeneralValueContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.PredicateComparisonContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.ValueContext;
import com.braintribe.model.processing.query.parser.impl.context.ConditionCustomContext;
import com.braintribe.model.query.conditions.ValueComparison;

public abstract class GmqlComparisonParserListener extends GmqlEntityEnumParserListener {

	@Override
	public void exitValue(ValueContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void enterGeneralValue(GeneralValueContext ctx) {
		if (isDefaultSourceEnabled()) {
			setCustomParsingExcpetion(new GmqlQueryParserException("EntityQuery and PropertyQuery are not allowed to have aggregate or join functions"));
			throw new RuntimeException();
		}
	}

	@Override
	public void exitGeneralValue(GeneralValueContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitPredicateComparison(PredicateComparisonContext ctx) {
		Object leftOperand = takeValue(ctx.leftOperand).getReturnValue();
		Object rightOperand = takeValue(ctx.rightOperand).getReturnValue();
		String operator = ctx.Operator().getText();
		ValueComparison valueComparison = $.comparison(leftOperand, rightOperand, operator);
		setValue(ctx, new ConditionCustomContext(valueComparison));
	}

	@Override
	public void exitBooleanFunctionComparison(BooleanFunctionComparisonContext ctx) {
		propagateChildResult(ctx);
	}
}
