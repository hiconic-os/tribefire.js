// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import java.util.List;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AliasContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EscapedIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GenericIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.IdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.KeyWordIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;

public abstract class GmqlIdentifierParserListener extends GmqlBooleanConditionParserListener {

	@Override
	public void exitIdentifier(IdentifierContext ctx) {
		List<GenericIdentifierContext> generalIdentifierList = ctx.genericIdentifier();
		StringBuilder stringBuilder = new StringBuilder();
		int counter = 0;
		while (!generalIdentifierList.isEmpty()) {
			if (counter > 0) {
				stringBuilder.append(".");
			}
			DefaultCustomContext currentContext = takeValue(generalIdentifierList.remove(0)).cast();
			stringBuilder.append(currentContext.getReturnValue());
			counter++;
		}
		setValue(ctx, new DefaultCustomContext(stringBuilder.toString()));
	}

	@Override
	public void exitEscapedIdentifier(EscapedIdentifierContext ctx) {
		setValue(ctx, new DefaultCustomContext(ctx.KeyWord().toString()));
	}

	@Override
	public void exitKeyWordIdentifier(KeyWordIdentifierContext ctx) {
		setValue(ctx, takeValue(ctx.escapedIdentifier()));
	}

	@Override
	public void exitAlias(AliasContext ctx) {
		propagateChildResult(ctx);
	}

}
