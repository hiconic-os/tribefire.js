// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import java.util.ArrayList;
import java.util.List;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AscendingOrderByDirectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.DescendingOrderByDirectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderByContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderByExpressionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderBySingleContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.OrderingCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.OrderingDirectionCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ValueCustomContext;
import com.braintribe.model.query.OrderingDirection;

public abstract class GmqlOrderByParserListener extends GmqlPaginationParserListener {

	@Override
	public void exitAscendingOrderByDirection(AscendingOrderByDirectionContext ctx) {
		setValue(ctx, new OrderingDirectionCustomContext(OrderingDirection.ascending));
	}

	@Override
	public void exitDescendingOrderByDirection(DescendingOrderByDirectionContext ctx) {
		setValue(ctx, new OrderingDirectionCustomContext(OrderingDirection.descending));
	}

	@Override
	public void exitOrderByExpression(OrderByExpressionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitOrderBySingle(OrderBySingleContext ctx) {
		Object orderBy = ((ValueCustomContext<?>) takeValue(ctx.orderByExpression()).cast()).getReturnValue();
		OrderingDirection direction = OrderingDirection.ascending;
		if (ctx.orderByDirection() != null) {
			direction = ((OrderingDirectionCustomContext) takeValue(ctx.orderByDirection()).cast()).getReturnValue();
		}

		setValue(ctx, new ObjectCustomContext($.singleOrderBy(orderBy, direction)));
	}

	@Override
	public void exitOrderBy(OrderByContext ctx) {
		List<Object> orderByList = new ArrayList<Object>();
		List<OrderBySingleContext> orderBySingleList = ctx.orderBySingle();
		while (!orderBySingleList.isEmpty()) {
			Object orderBy = ((ObjectCustomContext) takeValue(orderBySingleList.remove(0)).cast()).getReturnValue();
			orderByList.add(orderBy);
		}

		setValue(ctx, new OrderingCustomContext($.orderBy(orderByList)));
	}
}
