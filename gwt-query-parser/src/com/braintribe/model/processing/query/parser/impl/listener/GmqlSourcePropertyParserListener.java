// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.api.GmqlQueryParserException;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SourcePropertyContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;
import com.braintribe.model.query.PropertyOperand;
import com.braintribe.model.query.Source;

public abstract class GmqlSourcePropertyParserListener extends GmqlOrderByParserListener {

	@Override
	public void exitSourceProperty(SourcePropertyContext ctx) {
		String signature = ((DefaultCustomContext) takeValue(ctx.identifier()).cast()).getReturnValue();
		Source source;
		String propertyName;
		
		if(isQueryHeadParsing()){ // if parsing a query head
			// this should never be accessible in case of entity query or property query, as it is only possible as a selection in case of the select query
			// so always assume that there is an alias
			assert(!isDefaultSourceEnabled());

			if(signature.contains(".")){ // there is an alias and propertyName expected
				String alias = signature.substring(0, signature.indexOf("."));
				source = acquireSource(alias);
				propertyName = signature.substring(signature.indexOf(".") + 1);
			}
			else{ // the provided value must be an alias 
				source = acquireSource(signature); // get source
				propertyName = null; 
			}
		}
		else{ // query tail is being parsed and all sources have already been defined, so no need to use acquire at this point
			if(isDefaultSourceEnabled()){ // if a default source is possible, i.e. EntityQuery or PropertyQuery
				//source = getDefaultSource();
				source = null;
				if(signature.contains(".")){ // there might be an alias specified
					String possibleAlias = signature.substring(0, signature.indexOf("."));
					if(validateIfSourceExists(possibleAlias)){ // validate that it is a source
						propertyName = signature.substring(signature.indexOf(".") + 1);// the rest of the signature is the propertyName
					}
					else{ // No alias was detected, therefore all the signature is a propertyName with a default source assumed
						propertyName = signature; 
					}
				}
				else{ // the provided value might be an alias 
					if(!validateIfSourceExists(signature)){ // if not an alias then the signature is the propertyName
						propertyName = signature;
					} else {
						propertyName = null;
					}
				}				
			}
			else{
				if(signature.contains(".")){ // there is an alias and propertyName expected
					// an alias must be provided, otherwise throw an exception
					String alias = signature.substring(0, signature.indexOf("."));
					if(validateIfSourceExists(alias)){
						source = acquireSource(alias);
						propertyName = signature.substring(signature.indexOf(".") + 1);
					}else{
						setCustomParsingExcpetion(new GmqlQueryParserException("Source expected and not registered, provided alias: " + alias));
						throw new RuntimeException();
					}					
				}
				else{ // the provided value must be an alias 
					if(validateIfSourceExists(signature)){ // validate that source is registered
						source = acquireSource(signature); // get source
						propertyName = null; 
					}
					else{
						setCustomParsingExcpetion(new GmqlQueryParserException("Source expected and not registered, provided alias: " + signature));
						throw new RuntimeException();
					}
				}
			}
		}
		PropertyOperand sourceProperty = $.sourceProperty(source, propertyName);
		addToObjectsWithSourcesList(sourceProperty);
		setValue(ctx, new ObjectCustomContext(sourceProperty));
	}
}
