package ${package};
#if ($scriptMode)

import com.braintribe.gwt.genericmodel.client.itw.DefaultLiterals;
import com.braintribe.gwt.genericmodel.client.itw.EntityTypeBinding;
import com.braintribe.gwt.genericmodel.client.itw.PropertyBinding;
import com.braintribe.gwt.genericmodel.client.itw.GenericAccessorMethods;
import com.braintribe.gwt.genericmodel.client.itw.GwtScriptEntityType;
import com.braintribe.gwt.genericmodel.client.itw.GwtScriptProperty;
import com.braintribe.gwt.genericmodel.client.itw.GwtCompileTimeProperty;
import com.braintribe.gwt.genericmodel.client.itw.JsNameReflector;
import com.braintribe.gwt.genericmodel.client.itw.JsReflectionTools;
import com.braintribe.gwt.genericmodel.client.reflect.GwtEntityType;
#end

@java.lang.SuppressWarnings({"deprecation", "unusable-by-js"})
public class ${className} extends ##
com.braintribe.gwt.genericmodel.client.itw.GwtScriptEntityType<${entityDesc.entityIfaceFullName}> {

	public static final ${className} INSTANCE = new ${className}();

    static {
        INSTANCE.setJavaType(${entityDesc.entityIfaceFullName}.class);
        INSTANCE.setProperties(new com.braintribe.model.generic.reflection.Property[]{
#foreach($property in $properties)
            ${property.singletonInstanceRef},
#end
        });
        INSTANCE.setSuperTypes(
        	${superTypeRefs}
        );
#if (${transientProperties})
        INSTANCE.setDeclaredTransientProperties(new com.braintribe.model.generic.reflection.TransientProperty[]{
#foreach($transientProperty in $transientProperties)
#if (!${transientProperty.isInherited})
            ${transientProperty.constructorSource},
#end#end ## ends: !inheritedFromSuperClass and the for-cycle
        });
#else ## ends: transientProperties
        INSTANCE.setNoTransientProperties();
#end
#if(${entityDesc.evaluatesToRef})
		INSTANCE.setEvaluatesTo(${entityDesc.evaluatesToRef});
#end        
#if(!${entityDesc.isAbstract} && ${entityDesc.hasInitializedProperty})
        INSTANCE.setInitializedProperties(new com.braintribe.model.generic.reflection.Property[]{
#foreach($property in $properties)#if(${property.hasNonNullInitializer})
			${property.singletonInstanceRef},
#end#end
        });
#end ## if(!isAbstract)
        
#if ($scriptMode)
        prepareDynamicSubclassing();
#end
    }

#if (${entityDesc.isAbstract})
	{
		super.setIsAbstract(true);
	}
#else
	@Override
	public ${entityDesc.entityIfaceFullName} createRaw() {
		return new ${enhancedName}();
	}

#end
#if (${selectiveInformation})
	{
		this.setHasExplicitSelectiveInformation(true);
	}

	@Override
	public String getSelectiveInformationFor(com.braintribe.model.generic.GenericEntity entity) {
		return ${selectiveInformation};
	}

#end
#if (${toStringInformation})
	{
		this.setHasExplicitToString(true);
	}

	@Override
	public String toString(${entityDesc.entityIfaceFullName} entity) {
		return ${toStringInformation};
	}

#end

	@Override
	public boolean isInstance(Object value) {
		return value instanceof ${entityDesc.entityIfaceFullName};
	}

#if ($scriptMode)
## This method might get inlined, for better analysis use @DoNotInline 
    @com.google.gwt.core.client.UnsafeNativeLong
    protected static native void prepareDynamicSubclassing() /*-{
##      THE GENERATED JS ONLY HAS ONE "VAR" STATEMENT WITH ALL THE VARIABLES, MAKING THE CODE IS SHORTER
    	var
    		constrF, //               A
			proto, //                 B
			et, //                    C
			eb; //                    D

    	#if (${entityDesc.needsDecoy})
##      WE USE THE "PROTO" VARIABLE HERE SO THAT WE DON"T NEED ANOTHER ONE.
    	proto = function(){@${entityDesc.decoyClassSimpleName}::new()(), @${entityDesc.decoyClassSimpleName}2::new()()};
    	#end

##      WARNING: DO NOTE USE Class.getPrototypeForClass(Class<?>) TO RESOLVE PROTOTYPE, THAT SOMETIMES RETURNS NULL!!!
		et = @${className}::INSTANCE;
#if(${entityDesc.isAbstract})
		constrF = @JsReflectionTools::extractConstructor(*)(@${enhancedName}::new());
#else
		constrF = @JsReflectionTools::extractConstructor(*)(et.@GwtEntityType::createRaw());
#end
		proto = @JsReflectionTools::prototypeOf(*)(constrF);


#foreach($property in $properties)
#if (!${property.isInheritedFromSuperclass} || !${property.isOverlay})
#if (${property.isCollection})
        @PropertyBinding::createAndSetForCollection(*)(
			${property.singletonInstanceJsniRef},
        	proto, ${property.isInheritedFromSuperclassFlag}, ${property.isOverlayFlag},
			${property.collectionTypeCodeJsniRefOrNull},
			${property.keyTypeCodeJsniRefIfSimpleOrObject},
			${property.valueTypeCodeJsniRefIfSimpleOrObject})
#else
        @PropertyBinding::createAndSetForNonCollection(*)(
			${property.singletonInstanceJsniRef},
        	proto, ${property.isInheritedFromSuperclassFlag}, ${property.isOverlayFlag},
			${property.valueTypeCodeJsniRefIfSimpleOrObject})
#end ## isCollection
        	.@${property.declaringType.qualifiedSourceName}::${property.getterName}()
        	.@${property.declaringType.qualifiedSourceName}::${property.setterName}(*);
#end#end ## foreach property 

        eb = @EntityTypeBinding::new()();
		eb.@EntityTypeBinding::enhancedProto = proto;
		eb.@EntityTypeBinding::enhancedClass = @${entityDesc.enhancedClassFullName}::class;
		eb.@EntityTypeBinding::entityType = ${entityDesc.entityTypeSingletonJsniRef};

       	et.@GwtEntityType::protoInstance = proto;
        et.@GwtScriptEntityType::setEntityTypeBinding(*)(eb);  	

## WARNING: Here we re-assign [proto], now it is the prototype of the EntityType, not the entity class
#if (${toStringInformation} || ${selectiveInformation})
		proto = @Class::getPrototypeForClass(*)(@${className}::class);

#if (${toStringInformation})
        eb.@EntityTypeBinding::toStringMethod = proto.@${className}::toString(${entityDesc.entityIfaceJniSignature});
#end
#if (${selectiveInformation})
        eb.@EntityTypeBinding::getSelectiveInformationForMethod = proto.@${className}::getSelectiveInformationFor(*);
#end
#end ## if toString or toSelectiveInfo
    }-*/;
#end ## if($scriptMode) 

}
